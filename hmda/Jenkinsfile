podTemplate(label: 'buildSbtPod', containers: [
  containerTemplate(name: 'sbt', image: 'jenkinsxio/builder-scala', ttyEnabled: true, command: 'cat'),
  containerTemplate(name: 'docker', image: 'docker', ttyEnabled: true, command: 'cat'),
  containerTemplate(name: 'helm', image: 'lachlanevenson/k8s-helm', ttyEnabled: true, command: 'cat')
],
volumes: [
  hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
]) {
  node('buildSbtPod') {
    sh "env | sort"

    def repo = checkout scm
    def gitBranch = repo.GIT_BRANCH
    def commitId = sh(returnStdout: true, script: 'git rev-parse HEAD')
    def gitCommit = repo.GIT_COMMIT
    def shortCommit = repo.GIT_COMMIT[0..7]
    def isDeployPR = sh(returnStdout: true, script: "git log -1").contains("[deploy pr]")
    def gitTagged = env.TAG_NAME != null

    if (gitBranch == "master") {
      env.DOCKER_TAG = "latest"
    } else if (gitTagged) {
      env.DOCKER_TAG = env.TAG_NAME
    } else {
      env.DOCKER_TAG = env.BRANCH_NAME
    }

    println "DOCKER_TAG: ${env.DOCKER_TAG}, TAG_NAME: ${env.TAG_NAME}, gitbranch: ${gitBranch}, isDeployPR: ${isDeployPR}"

    stage('Build Scala Code, Generate Dockerfile, Publish to docker hub') {

      container('sbt') {
        sh "sbt -batch hmda-platform/docker:stage"
      }

      container('docker') {
        //Push to Dockerhub
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'dockerhub',
                  usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
            if (gitTagged || gitBranch == "master") {
                sh "docker build --rm -t=${env.DOCKER_HUB_USER}/hmda-platform:public hmda/target/docker/stage"
                sh """
                  docker tag ${env.DOCKER_HUB_USER}/hmda-platform:public ${env.DOCKER_HUB_USER}/hmda-platform:${env.DOCKER_TAG}
                  docker login -u ${env.DOCKER_HUB_USER} -p ${env.DOCKER_HUB_PASSWORD}
                  docker push ${env.DOCKER_HUB_USER}/hmda-platform:${env.DOCKER_TAG}
                  docker rmi -f ${env.DOCKER_HUB_USER}/hmda-platform:${env.DOCKER_TAG}
                """
            }
            sh "rm -rf hmda/target/docker/stage"
        }
      }
    }

    stage('Build Scala Code (w/ Lightbend Telemetry), Generate Dockerfile, Publish to DTR') {
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'lightbend-commercial',
        usernameVariable: 'LIGHTBEND_USER', passwordVariable: 'LIGHTBEND_PASSWORD']]) {
            writeFile file: 'commercial.credentials',
                      text: """
                        realm = Bintray
                        host = dl.bintray.com
                        user = ${env.LIGHTBEND_USER}
                        password = ${env.LIGHTBEND_PASSWORD}
                      """
        }

        //HMDA utilizes commercial lightbend plugins (Telemetry) to collect metrics.
        //In order to not break the publicly released docker images and clone of this repository, by default we use build files that
        //do not include lightbend's commercial jars.
        //Files that contain lightbends commercial jars are:
        //commercial-build
        //hmda/commercial-build
        //project/cinnamon
        //These files are renamed before the project is built on Jenkins
        sh "mkdir ${env.WORKSPACE}/.lightbend"
        sh "cp commercial.credentials ${env.WORKSPACE}/.lightbend/commercial.credentials"
        sh 'mv build.sbt build.txt'
        sh 'mv commercial-build.txt build.sbt'
        sh 'mv hmda/build.sbt hmda/build.txt'
        sh 'mv hmda/commercial-build.txt hmda/build.sbt'
        sh 'mv project/cinnamon.txt project/cinnamon.sbt'
        sh 'rm -r hmda/src/test'

      container('sbt') {
        sh "sbt -batch hmda-platform/docker:stage"
      }

      container('docker') {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'hmda-platform-jenkins-service',
          usernameVariable: 'DTR_USER', passwordVariable: 'DTR_PASSWORD']]) {
          withCredentials([string(credentialsId: 'internal-docker-registry', variable: 'DOCKER_REGISTRY_URL')]){
            if (gitTagged || gitBranch == "master" || isDeployPR) {
              sh "docker build --rm -t=hmda/hmda-platform:internal hmda/target/docker/stage"

              //Push to DTR
              sh """
                docker tag hmda/hmda-platform:internal ${DOCKER_REGISTRY_URL}/hmda/hmda-platform:${env.DOCKER_TAG}
                docker login ${DOCKER_REGISTRY_URL} -u ${env.DTR_USER} -p ${env.DTR_PASSWORD}
                docker push ${DOCKER_REGISTRY_URL}/hmda/hmda-platform:${env.DOCKER_TAG}
              """
            }
          }
        }
      }


    stage('Deploy') {
        withCredentials([string(credentialsId: 'internal-docker-registry', variable: 'DOCKER_REGISTRY_URL')]){
          if (env.BRANCH_NAME == 'master' || isDeployPR) {
            container('helm') {
              sh """
                helm upgrade --install --force \
                --namespace=default \
                --values=kubernetes/hmda-platform/values.yaml \
                --set image.repository=${DOCKER_REGISTRY_URL}/hmda/hmda-platform \
                --set commitId=$shortCommit \
                --set image.tag=${env.DOCKER_TAG} \
                --set image.pullPolicy=Always \
                hmda-platform kubernetes/hmda-platform
              """
            }
          }
        }
      }
    }

    stage('Docker Clean Up')
      container('docker') {
        sh """
          docker images
          docker image prune -f
          docker images
          docker ps -a
        """
      }
    }

  }
}
